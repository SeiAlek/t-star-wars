{"version":3,"sources":["common/helpers/createDataMap.js","common/helpers/completePeopleAdditionalData.js","common/helpers/getPageNumber.js","common/helpers/formatYear.js","common/helpers/createDateFromString.js","common/helpers/compareDate.js","common/helpers/isDateRightFormat.js","common/api.js","common/components/Backdrop.jsx","common/components/Popup.jsx","components/people/PersonCard.jsx","common/components/Autocomplete.jsx","common/components/Filters.jsx","components/people/PeopleLayout.jsx","components/people/PeopleContainer.jsx","app/router/Routes.jsx","common/components/AppBar.jsx","app/layouts/AppLayout.jsx","app/components/AppContainer.jsx","index.jsx"],"names":["createDataMap","array","name","reduce","acc","item","completePeopleAdditionalData","people","films","starships","species","filmsMap","starshipsMap","speciesMap","map","person","filmsWithPerson","url","id","title","releaseDate","sort","a","b","Date","getTime","personStarships","personSpecies","getPageNumber","urlString","URL","URLSearchParams","search","get","formatYear","string","uppercase","toUpperCase","year","replace","era","createDateFromString","compareDate","firstDate","secondDate","isDateRightFormat","date","swApi","axios","create","baseURL","timeout","fetchAllEntities","endpoint","results","firstPage","data","push","nextPageNumber","next","nextPage","useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","marginTop","BackdropWithCircularProgress","isOpen","handleClose","classes","Backdrop","className","open","onClick","CircularProgress","defaultProps","memo","DialogTitle","withStyles","root","margin","padding","spacing","closeButton","position","right","top","palette","grey","children","onClose","other","disableTypography","Typography","variant","IconButton","aria-label","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","CustomizedDialogs","button","handleAction","Dialog","dividers","Button","autoFocus","width","minWidth","maxWidth","fontWeight","PersonCard","Box","mb","component","birthYear","length","join","getFullYear","CustomizedAutocomplete","value","options","label","placeholder","limitTags","handleSelect","getOptionLabel","useRef","option","getOptionSelected","val","renderInput","params","TextField","renderOption","inputValue","matches","match","parts","parse","part","style","highlight","text","handleChange","e","currentValue","Autocomplete","fullWidth","multiple","filterSelectedOptions","onChange","current","formWrapper","paddingTop","fieldWrapper","Filters","selectedFilms","selectedSpecies","startYear","endYear","isRelationshipAnd","Paper","elevation","Grid","container","xs","FormControlLabel","control","Switch","checked","inputProps","FormControl","FormHelperText","PeopleLayout","isLoading","selectedPerson","handleSelectPerson","sm","List","dense","ListItem","ListItemText","primary","align","Popup","PeopleContainer","enqueueSnackbar","useSnackbar","useState","setPeople","setFilms","setSpecies","setIsLoading","personId","setPersonId","setIsRelationshipAnd","setSelectedFilms","setSelectedSpecies","setStartYear","setEndYear","isPersonHasEntity","entityId","propertyName","some","peopleFilteredByFilms","useMemo","filter","every","peopleFilteredByFilmsAndSpecies","peopleFilteredByBirthYear","filterStartYear","filterEndYear","isBirthYearMoreStart","isBirthYearLessEnd","filteredPeople","hasFilm","film","hasSpecie","specie","Boolean","foundPerson","find","fetchData","Promise","all","then","fetchedPeople","fetchedPerson","birth_year","release_date","peopleWithLinks","fetchedFilms","fetchedStarships","fetchedSpecies","message","fetchAndSetData","peopleWithData","useEffect","currentTarget","setterName","target","setterValue","setters","prev","Router","path","exact","flexGrow","CustomizedAppBar","AppBar","Toolbar","noWrap","AppLayout","CssBaseline","Container","mt","App","ReactRouterRoute","Route","Routes","ReactDOM","render","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.a00a2fb4.chunk.js","sourcesContent":["/**\n * Create object from array\n * @param {Array} array\n * @param {Name} name the name which will be key in the creating object\n * @returns {Object}\n */\nconst createDataMap = (array, name) => array.reduce((acc, item) => ({\n  ...acc,\n  [`${item[name]}`]: item,\n}), {});\n\nexport default createDataMap;\n","import createDataMap from './createDataMap';\n\n/**\n * Expand people with films, starships, species\n * @param {Array} people\n * @param {Array} films\n * @param {Array} starships\n * @param {Array} species\n * @returns {Array} people with extra data\n */\nconst completePeopleAdditionalData = ({\n  people,\n  films,\n  starships,\n  species,\n}) => {\n  const filmsMap = createDataMap(films, 'url');\n  const starshipsMap = createDataMap(starships, 'url');\n  const speciesMap = createDataMap(species, 'url');\n\n  return people.map((person) => {\n    const filmsWithPerson = person.films\n      .map((url) => ({\n        id: filmsMap[url].id,\n        title: filmsMap[url].title,\n        releaseDate: filmsMap[url].releaseDate,\n      }))\n      .sort((a, b) => {\n        const timestampA = new Date(a.releaseDate).getTime();\n        const timestampB = new Date(b.releaseDate).getTime();\n\n        return timestampA - timestampB;\n      });\n\n    const personStarships = person.starships\n      .map((url) => ({\n        id: starshipsMap[url].id,\n        name: starshipsMap[url].name,\n      }));\n\n    const personSpecies = person.species.map((url) => ({\n      id: speciesMap[url].id,\n      name: speciesMap[url].name,\n    }));\n\n    return {\n      ...person,\n      films: filmsWithPerson,\n      starships: personStarships || null,\n      species: personSpecies || null,\n    };\n  });\n};\n\nexport default completePeopleAdditionalData;\n","/**\n * Get page from search params string with url\n * @param {String} urlString\n * @returns {Number|null}\n */\nconst getPageNumber = (urlString) => {\n  if (!urlString) {\n    return null;\n  }\n\n  const url = new URL(urlString);\n  const params = new URLSearchParams(url.search);\n\n  return params.get('page') || null;\n};\n\nexport default getPageNumber;\n","/**\n * Format string to date in Star Wars type\n * @param {String} string\n * @returns {String}\n */\nconst formatYear = (string) => {\n  const uppercase = string.toUpperCase();\n  const year = uppercase.replace(/[^\\d]/gi, '');\n  const era = uppercase.replace(/[^ABY]/gi, '');\n\n  return `${year}${era ? ` ${era}` : ''}`;\n};\n\nexport default formatYear;\n","/**\n * Create object from string with date in Star Wars format\n * @param {String} string string with date\n * @returns {Object} object with year and era properties\n */\nconst createDateFromString = (string) => ({\n  year: +string.replace(/[^\\d]/gi, ''),\n  era: string.replace(/[^ABY]/gi, ''),\n});\n\nexport default createDateFromString;\n","import createDateFromString from './createDateFromString';\n\n/**\n * Compare dates in Star War formats\n * @param {String} a first date in Star Wars format\n * @param {String} b second date in Star Wars format\n * @returns {Boolean} it's 1 if a > b, -1 if a < b, 0 if a = b\n */\nconst compareDate = (a, b) => {\n  const firstDate = createDateFromString(a);\n  const secondDate = createDateFromString(b);\n\n  if (firstDate.era === secondDate.era && firstDate.year === secondDate.year) {\n    return 0;\n  }\n\n  if (firstDate.era === 'BBY' && secondDate.era === 'ABY') {\n    return -1;\n  }\n\n  if (firstDate.era === 'BBY' && secondDate.era === 'BBY') {\n    if (firstDate.year > secondDate.year) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (firstDate.era === 'ABY' && secondDate.era === 'ABY') {\n    if (firstDate.year > secondDate.year) {\n      return 1;\n    }\n\n    return -1;\n  }\n\n  return null;\n};\n\nexport default compareDate;\n","import createDateFromString from './createDateFromString';\n\n/**\n * Check if incoming string has right date Star Wars format\n * @param {String} string date in SW format\n * @returns {Boolean}\n */\nconst isDateRightFormat = (string) => {\n  const date = createDateFromString(string);\n\n  if (date.era !== 'BBY' && date.era !== 'ABY') {\n    return false;\n  }\n\n  if (date.year < 0) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default isDateRightFormat;\n","import axios from 'axios';\nimport { getPageNumber } from './helpers';\n\nconst swApi = axios.create({\n  baseURL: 'https://swapi.dev/api',\n  timeout: 60000,\n});\n\nconst fetchAllEntities = async (endpoint) => {\n  const results = [];\n  const { data: firstPage } = await swApi.get(`/${endpoint}`);\n\n  results.push(...firstPage.results);\n\n  let nextPageNumber = getPageNumber(firstPage.next);\n\n  while (nextPageNumber) {\n    // eslint-disable-next-line no-await-in-loop\n    const { data: nextPage } = await swApi.get(\n      `/${endpoint}?page=${nextPageNumber}`,\n    );\n\n    nextPageNumber = getPageNumber(nextPage.next);\n    results.push(...nextPage.results);\n  }\n\n  return results;\n};\n\nexport const fetchPeople = () => fetchAllEntities('people');\nexport const fetchFilms = () => fetchAllEntities('films');\nexport const fetchStarships = () => fetchAllEntities('starships');\nexport const fetchSpecies = () => fetchAllEntities('species');\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    marginTop: 0,\n  },\n}));\n\nconst BackdropWithCircularProgress = ({ isOpen, handleClose }) => {\n  const classes = useStyles();\n\n  return (\n    <Backdrop className={classes.backdrop} open={isOpen} onClick={handleClose}>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  );\n};\n\nBackdropWithCircularProgress.propTypes = {\n  isOpen: PropTypes.bool,\n  handleClose: PropTypes.func,\n};\n\nBackdropWithCircularProgress.defaultProps = {\n  isOpen: false,\n  handleClose: null,\n};\n\nexport default memo(BackdropWithCircularProgress);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)(({\n  children,\n  classes,\n  onClose,\n  ...other\n}) => (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  <MuiDialogTitle disableTypography className={classes.root} {...other}>\n    <Typography variant=\"h6\">{children}</Typography>\n    {onClose ? (\n      <IconButton\n        aria-label=\"close\"\n        className={classes.closeButton}\n        onClick={onClose}\n      >\n        <CloseIcon />\n      </IconButton>\n    ) : null}\n  </MuiDialogTitle>\n));\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst CustomizedDialogs = ({\n  children,\n  title,\n  button,\n  handleClose,\n  handleAction,\n}) => (\n  <Dialog onClose={handleClose} open>\n    <DialogTitle onClose={handleClose}>\n      {title}\n    </DialogTitle>\n    <DialogContent dividers>\n      {children}\n    </DialogContent>\n    {handleAction && button && (\n      <DialogActions>\n        <Button autoFocus onClick={handleClose} color=\"primary\">\n          {button}\n        </Button>\n      </DialogActions>\n    )}\n  </Dialog>\n);\n\nCustomizedDialogs.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  button: PropTypes.string,\n  handleClose: PropTypes.func.isRequired,\n  handleAction: PropTypes.func,\n};\n\nCustomizedDialogs.defaultProps = {\n  button: null,\n  handleAction: null,\n};\n\nexport default memo(CustomizedDialogs);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    minWidth: 320,\n    maxWidth: 600,\n  },\n  title: {\n    fontWeight: 600,\n  },\n}));\n\nconst PersonCard = ({ person }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Box mb={2}>\n        <Typography component=\"span\" className={classes.title}>\n          {'Born: '}\n        </Typography>\n        <Typography component=\"span\">\n          {person.birthYear}\n        </Typography>\n      </Box>\n      {!!person.species.length && (\n        <Box mb={2}>\n          <Typography component=\"span\" className={classes.title}>\n            {'Species: '}\n          </Typography>\n          <Typography component=\"span\">\n            {`${person.species.map(({ name }) => name).join(', ')}`}\n          </Typography>\n        </Box>\n      )}\n      <Box mb={2}>\n        <Typography component=\"span\" className={classes.title}>\n          {'Movies: '}\n        </Typography>\n        <Typography component=\"span\">\n          {person.films.map(({ title, releaseDate }) => (\n            `${title} (${new Date(releaseDate).getFullYear()})`\n          )).join(', ')}\n        </Typography>\n      </Box>\n      {!!person.starships.length && (\n        <Box mb={2}>\n          <Typography component=\"span\" className={classes.title}>\n            {'Starships: '}\n          </Typography>\n          <Typography component=\"span\">\n            {person.starships.map(({ name }) => name).join(', ')}\n          </Typography>\n        </Box>\n      )}\n    </div>\n  );\n};\n\nPersonCard.propTypes = {\n  person: PropTypes.shape({\n    url: PropTypes.string,\n    name: PropTypes.string,\n    birthYear: PropTypes.string,\n    films: PropTypes.arrayOf(PropTypes.shape({})),\n    appearedInFilm: PropTypes.string,\n    species: PropTypes.arrayOf(PropTypes.shape({})),\n    starships: PropTypes.arrayOf(PropTypes.shape({})),\n  }),\n};\n\nPersonCard.defaultProps = {\n  person: null,\n};\n\nexport default memo(PersonCard);\n","import React, { useRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > * + *': {\n      marginTop: theme.spacing(3),\n    },\n  },\n}));\n\nconst CustomizedAutocomplete = ({\n  id,\n  name,\n  value,\n  options,\n  label,\n  placeholder,\n  limitTags,\n  variant,\n  handleSelect,\n}) => {\n  const classes = useStyles();\n\n  const getOptionLabel = useRef((option) => option.title || option.name);\n\n  const getOptionSelected = useRef((option, val) => option === val);\n\n  const renderInput = useRef((params) => (\n    <TextField\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...params}\n      variant={variant}\n      label={label}\n      placeholder={placeholder}\n    />\n  ));\n\n  const renderOption = useRef((option, { inputValue }) => {\n    const matches = match(option.title, inputValue);\n    const parts = parse(option.title, matches);\n\n    return (\n      <div>\n        {parts.map((part) => (\n          <span\n            key={part.text}\n            style={{ fontWeight: part.highlight ? 700 : 400 }}\n          >\n            {part.text}\n          </span>\n        ))}\n      </div>\n    );\n  });\n\n  const handleChange = useRef(\n    (e, currentValue) => handleSelect(e, currentValue, name),\n  );\n\n  return (\n    <div className={classes.root}>\n      <Autocomplete\n        id={id}\n        name={name}\n        value={value}\n        options={options}\n        fullWidth\n        multiple\n        filterSelectedOptions\n        limitTags={limitTags}\n        onChange={handleChange.current}\n        getOptionLabel={getOptionLabel.current}\n        getOptionSelected={getOptionSelected.current}\n        renderInput={renderInput.current}\n        renderOption={renderOption.current}\n      />\n    </div>\n  );\n};\n\nCustomizedAutocomplete.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.arrayOf(PropTypes.shape({})),\n  options: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  label: PropTypes.string,\n  placeholder: PropTypes.string,\n  limitTags: PropTypes.number,\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard']),\n  handleSelect: PropTypes.func.isRequired,\n};\n\nCustomizedAutocomplete.defaultProps = {\n  value: [],\n  label: '',\n  placeholder: '',\n  limitTags: 1,\n  variant: 'outlined',\n};\n\nexport default memo(CustomizedAutocomplete);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from './Autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  formWrapper: {\n    paddingTop: theme.spacing(4),\n  },\n  fieldWrapper: {\n    padding: theme.spacing(0, 2, 4),\n  },\n}));\n\nconst Filters = ({\n  films,\n  species,\n  selectedFilms,\n  selectedSpecies,\n  startYear,\n  endYear,\n  isRelationshipAnd,\n  handleChange,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Paper elevation={3} className={classes.root}>\n      <Grid container className={classes.formWrapper}>\n        <Grid item className={classes.fieldWrapper} xs={12}>\n          <FormControlLabel\n            control={\n              // eslint-disable-next-line react/jsx-wrap-multilines\n              <Switch\n                checked={isRelationshipAnd}\n                onChange={handleChange}\n                color=\"primary\"\n                name=\"isRelationshipAnd\"\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n              />\n            }\n            label={\n              isRelationshipAnd\n                ? 'Relative all selected fields'\n                : 'Relative one of selected fields'\n            }\n          />\n        </Grid>\n        <Grid item className={classes.fieldWrapper} xs={12}>\n          {films && (\n            <Autocomplete\n              id=\"films-autocomplete-field\"\n              name=\"films\"\n              options={films}\n              value={selectedFilms}\n              label=\"Movies\"\n              handleSelect={handleChange}\n            />\n          )}\n        </Grid>\n        <Grid item className={classes.fieldWrapper} xs={12}>\n          {species && (\n            <Autocomplete\n              id=\"species-autocomplete-field\"\n              name=\"species\"\n              options={species}\n              value={selectedSpecies}\n              label=\"Species\"\n              handleSelect={handleChange}\n            />\n          )}\n        </Grid>\n        <Grid item className={classes.fieldWrapper} xs={12}>\n          <FormControl fullWidth>\n            <TextField\n              name=\"startYear\"\n              value={startYear}\n              label=\"Start Year\"\n              variant=\"outlined\"\n              fullWidth\n              onChange={handleChange}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item className={classes.fieldWrapper} xs={12}>\n          <FormControl fullWidth>\n            <TextField\n              name=\"endYear\"\n              value={endYear}\n              label=\"End Year\"\n              fullWidth\n              variant=\"outlined\"\n              onChange={handleChange}\n            />\n            <FormHelperText variant=\"outlined\">\n              For example: 112 BBY\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nFilters.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  species: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  selectedFilms: PropTypes.arrayOf(PropTypes.shape({})),\n  selectedSpecies: PropTypes.arrayOf(PropTypes.shape({})),\n  startYear: PropTypes.string,\n  endYear: PropTypes.string,\n  isRelationshipAnd: PropTypes.bool,\n  handleChange: PropTypes.func.isRequired,\n};\n\nFilters.defaultProps = {\n  selectedFilms: [],\n  selectedSpecies: [],\n  startYear: '',\n  endYear: '',\n  isRelationshipAnd: false,\n};\n\nexport default memo(Filters);\n","/* eslint-disable max-len */\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport BackdropWithCircularProgress from '../../common/components/Backdrop';\nimport Popup from '../../common/components/Popup';\nimport PersonCard from './PersonCard';\nimport Filters from '../../common/components/Filters';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n  },\n}));\n\nconst PeopleLayout = ({\n  isLoading,\n  people,\n  films,\n  species,\n  selectedPerson,\n  selectedFilms,\n  selectedSpecies,\n  startYear,\n  endYear,\n  isRelationshipAnd,\n  handleSelectPerson,\n  handleChange,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n          {films && species && (\n            <Filters\n              films={films}\n              species={species}\n              selectedFilms={selectedFilms}\n              selectedSpecies={selectedSpecies}\n              startYear={startYear}\n              endYear={endYear}\n              isRelationshipAnd={isRelationshipAnd}\n              handleChange={handleChange}\n            />\n          )}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          {people?.map((person) => (\n            <List dense key={person.id}>\n              <ListItem\n                button\n                component=\"li\"\n                id={person.id}\n                onClick={handleSelectPerson}\n              >\n                <ListItemText primary={person.name} />\n              </ListItem>\n            </List>\n          ))}\n          {people?.length === 0 && (\n            <Typography variant=\"h6\" align=\"center\">Characters not found...</Typography>\n          )}\n        </Grid>\n      </Grid>\n      {selectedPerson && (\n        <Popup title={selectedPerson.name} handleClose={handleSelectPerson}>\n          <PersonCard person={selectedPerson} />\n        </Popup>\n      )}\n      <BackdropWithCircularProgress isOpen={isLoading} />\n    </div>\n  );\n};\n\nPeopleLayout.propTypes = {\n  isLoading: PropTypes.bool,\n  people: PropTypes.arrayOf(PropTypes.shape({\n    url: PropTypes.string,\n    name: PropTypes.string,\n  })),\n  films: PropTypes.arrayOf(PropTypes.shape({})),\n  species: PropTypes.arrayOf(PropTypes.shape({})),\n  selectedPerson: PropTypes.shape({\n    name: PropTypes.string,\n    appearedInFilm: PropTypes.arrayOf(PropTypes.shape({})),\n    species: PropTypes.arrayOf(PropTypes.shape({})),\n  }),\n  selectedFilms: PropTypes.arrayOf(PropTypes.shape({})),\n  selectedSpecies: PropTypes.arrayOf(PropTypes.shape({})),\n  startYear: PropTypes.string,\n  endYear: PropTypes.string,\n  isRelationshipAnd: PropTypes.bool,\n  handleSelectPerson: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nPeopleLayout.defaultProps = {\n  isLoading: false,\n  people: null,\n  films: null,\n  species: null,\n  selectedPerson: null,\n  selectedFilms: [],\n  selectedSpecies: [],\n  startYear: '',\n  endYear: '',\n  isRelationshipAnd: false,\n};\n\nexport default memo(PeopleLayout);\n","import React, {\n  useEffect, useState, useRef, useMemo,\n} from 'react';\nimport { useSnackbar } from 'notistack';\nimport * as API from '../../common/api';\nimport {\n  completePeopleAdditionalData,\n  formatYear,\n  compareDate,\n  isDateRightFormat,\n} from '../../common/helpers';\nimport PeopleLayout from './PeopleLayout';\n\nfunction PeopleContainer() {\n  const { enqueueSnackbar } = useSnackbar();\n  const [people, setPeople] = useState();\n  const [films, setFilms] = useState();\n  const [species, setSpecies] = useState();\n  const [isLoading, setIsLoading] = useState();\n  const [personId, setPersonId] = useState();\n  const [isRelationshipAnd, setIsRelationshipAnd] = useState(true);\n  const [selectedFilms, setSelectedFilms] = useState([]);\n  const [selectedSpecies, setSelectedSpecies] = useState([]);\n  const [startYear, setStartYear] = useState('');\n  const [endYear, setEndYear] = useState('');\n\n  const isPersonHasEntity = useRef((person, entityId, propertyName) => (\n    person[propertyName].some(({ id }) => entityId === id)\n  ));\n\n  const peopleFilteredByFilms = useMemo(() => {\n    if (selectedFilms.length > 0) {\n      const filteredPeople = people?.filter((person) => selectedFilms.every(({ id }) => (\n        isPersonHasEntity.current(person, id, 'films')\n      )));\n\n      return filteredPeople;\n    }\n\n    return people;\n  }, [selectedFilms, people]);\n\n  const peopleFilteredByFilmsAndSpecies = useMemo(() => {\n    if (selectedSpecies.length > 0) {\n      const filteredPeople = peopleFilteredByFilms?.filter(\n        (person) => selectedSpecies.every(({ id }) => (\n          isPersonHasEntity.current(person, id, 'species')\n        )),\n      );\n\n      return filteredPeople;\n    }\n\n    return peopleFilteredByFilms;\n  }, [selectedSpecies, peopleFilteredByFilms]);\n\n  const peopleFilteredByBirthYear = useMemo(() => {\n    const filterStartYear = isDateRightFormat(startYear) ? startYear : '999999 BBY';\n    const filterEndYear = isDateRightFormat(endYear) ? endYear : '999999 ABY';\n\n    const filteredPeople = peopleFilteredByFilmsAndSpecies?.filter((person) => {\n      const isBirthYearMoreStart = compareDate(person.birthYear, filterStartYear) >= 0;\n      const isBirthYearLessEnd = compareDate(filterEndYear, person.birthYear) >= 0;\n\n      return person.birthYear && isBirthYearMoreStart && isBirthYearLessEnd;\n    });\n\n    return filteredPeople;\n  }, [peopleFilteredByFilmsAndSpecies, startYear, endYear]);\n\n  const filteredPeople = useMemo(() => {\n    if (isRelationshipAnd) {\n      return peopleFilteredByBirthYear;\n    }\n\n    const filterStartYear = isDateRightFormat(startYear) ? startYear : '999999 BBY';\n    const filterEndYear = isDateRightFormat(endYear) ? endYear : '999999 ABY';\n\n    return people.filter((person) => {\n      const hasFilm = selectedFilms.some((film) => isPersonHasEntity.current(person, film.id, 'films'));\n      const hasSpecie = selectedSpecies.some((specie) => isPersonHasEntity.current(person, specie.id, 'species'));\n\n      const isBirthYearMoreStart = compareDate(person.birthYear, filterStartYear) >= 0;\n      const isBirthYearLessEnd = compareDate(filterEndYear, person.birthYear) >= 0;\n      const isBornInFilteredPeriod = person.birthYear && isBirthYearMoreStart && isBirthYearLessEnd;\n\n      return [hasFilm, hasSpecie, isBornInFilteredPeriod].some(Boolean);\n    });\n  }, [\n    people,\n    isRelationshipAnd,\n    selectedSpecies,\n    selectedFilms,\n    startYear,\n    endYear,\n    peopleFilteredByBirthYear,\n  ]);\n\n  const selectedPerson = useMemo(() => {\n    const foundPerson = people?.find(({ id }) => id === personId);\n\n    if (!foundPerson) {\n      return null;\n    }\n\n    return foundPerson;\n  }, [people, personId]);\n\n  const fetchData = useRef(async () => {\n    try {\n      setIsLoading(true);\n\n      const [\n        peopleWithLinks,\n        fetchedFilms,\n        fetchedStarships,\n        fetchedSpecies,\n      ] = await Promise.all([\n        API.fetchPeople()\n          .then((fetchedPeople) => fetchedPeople.map((fetchedPerson) => ({\n            id: fetchedPerson.url.replace(/\\D/ig, ''),\n            name: fetchedPerson.name,\n            birthYear: formatYear(fetchedPerson.birth_year),\n            films: fetchedPerson.films,\n            species: fetchedPerson.species,\n            starships: fetchedPerson.starships,\n            url: fetchedPerson.url,\n          }))),\n        API.fetchFilms()\n          .then((data) => data.map(({ title, release_date: releaseDate, url }) => ({\n            id: url.replace(/\\D/ig, ''),\n            title,\n            releaseDate,\n            url,\n          }))),\n        API.fetchStarships()\n          .then((data) => data.map(({ name, url }) => ({\n            id: url.replace(/\\D/ig, ''),\n            name,\n            title: name,\n            url,\n          }))),\n        API.fetchSpecies()\n          .then((data) => data.map(({ name, url }) => ({\n            id: url.replace(/\\D/ig, ''),\n            name,\n            title: name,\n            url,\n          }))),\n      ]);\n\n      return {\n        peopleWithLinks,\n        fetchedFilms,\n        fetchedStarships,\n        fetchedSpecies,\n      };\n    } catch (err) {\n      return enqueueSnackbar(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  });\n\n  const fetchAndSetData = useRef(async () => {\n    const {\n      peopleWithLinks,\n      fetchedFilms,\n      fetchedStarships,\n      fetchedSpecies,\n    } = await fetchData.current();\n\n    const peopleWithData = completePeopleAdditionalData({\n      people: peopleWithLinks,\n      films: fetchedFilms,\n      starships: fetchedStarships,\n      species: fetchedSpecies,\n    });\n\n    setPeople(peopleWithData);\n    setFilms(fetchedFilms);\n    setSpecies(fetchedSpecies);\n  });\n\n  useEffect(() => {\n    fetchAndSetData.current();\n  }, []);\n\n  const handleSelectPerson = useRef((e) => {\n    const { id } = e.currentTarget;\n\n    setPersonId(id);\n  });\n\n  const handleChange = useRef((e, value, name) => {\n    const setterName = name || e.target.name;\n    const setterValue = value || e.target.value;\n    const setters = {\n      films: () => setSelectedFilms(setterValue),\n      species: () => setSelectedSpecies(setterValue),\n      isRelationshipAnd: () => setIsRelationshipAnd((prev) => !prev),\n      startYear: () => setStartYear(formatYear(setterValue)),\n      endYear: () => setEndYear(formatYear(setterValue)),\n    };\n\n    if (setters[setterName]) {\n      setters[setterName]();\n    }\n  });\n\n  return (\n    <PeopleLayout\n      isLoading={isLoading}\n      people={filteredPeople}\n      films={films}\n      species={species}\n      selectedPerson={selectedPerson}\n      selectedFilms={selectedFilms}\n      selectedSpecies={selectedSpecies}\n      startYear={startYear}\n      endYear={endYear}\n      isRelationshipAnd={isRelationshipAnd}\n      handleSelectPerson={handleSelectPerson.current}\n      handleChange={handleChange.current}\n    />\n  );\n}\n\nexport default PeopleContainer;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PeopleContainer from '../../components/people/PeopleContainer';\n\nconst Router = () => (\n  <>\n    <Switch>\n      <Route path=\"/\" exact />\n    </Switch>\n    <Switch>\n      <Route path=\"/\" exact component={PeopleContainer} />\n    </Switch>\n  </>\n);\n\nexport default Router;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nconst CustomizedAppBar = ({ title }) => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"fixed\" className={classes.root}>\n      <Toolbar>\n        <Typography className={classes.title} variant=\"h6\" noWrap>\n          {title}\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nCustomizedAppBar.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default memo(CustomizedAppBar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport HeaderBar from '../../common/components/AppBar';\n\nconst AppLayout = ({ children }) => (\n  <>\n    <HeaderBar title=\"Star Wars Characters\" />\n    <CssBaseline />\n    <Container maxWidth=\"lg\">\n      <Box mt={12}>\n        {children}\n      </Box>\n    </Container>\n  </>\n);\n\nAppLayout.propTypes = {\n  children: PropTypes.node,\n};\n\nAppLayout.defaultProps = {\n  children: null,\n};\n\nexport default AppLayout;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\nimport { SnackbarProvider } from 'notistack';\nimport Routes from '../router/Routes';\nimport AppLayout from '../layouts/AppLayout';\n\nconst App = () => (\n  <QueryParamProvider ReactRouterRoute={Route}>\n    <SnackbarProvider>\n      <AppLayout>\n        <Routes />\n      </AppLayout>\n    </SnackbarProvider>\n  </QueryParamProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport AppContainer from './app/components/AppContainer';\n\nReactDOM.render(\n  <HashRouter>\n    <AppContainer />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}